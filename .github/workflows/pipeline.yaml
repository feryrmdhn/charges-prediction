name: CI/CD Pipeline for MLOps

on:
  push:
    branches:
      - main

jobs:
  ml-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
          echo "AWS_BUCKET_PREFIX=${{ secrets.AWS_BUCKET_PREFIX }}" >> .env
          echo "AWS_SAGEMAKER_ROLE=${{ secrets.AWS_SAGEMAKER_ROLE }}" >> .env
          echo "AWS_MODEL_NAME=${{ secrets.AWS_MODEL_NAME }}" >> .env
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> .env
          echo "AWS_ENDPOINT_NAME=${{ secrets.AWS_ENDPOINT_NAME }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_ACCESS_KEY_ID_ML=${{ secrets.AWS_ACCESS_KEY_ID_ML }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY_ML=${{ secrets.AWS_SECRET_ACCESS_KEY_ML }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env

      - name: Run preprocessing
        run: python app/src/preprocess/preprocess.py

      - name: Run training
        run: python app/src/train/training.py

      - name: Deploy model
        run: python app/src/deploy/inference.py

  build-api:
    needs: ml-pipeline
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file for Docker image
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
          echo "AWS_BUCKET_PREFIX=${{ secrets.AWS_BUCKET_PREFIX }}" >> .env
          echo "AWS_SAGEMAKER_ROLE=${{ secrets.AWS_SAGEMAKER_ROLE }}" >> .env
          echo "AWS_MODEL_NAME=${{ secrets.AWS_MODEL_NAME }}" >> .env
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> .env
          echo "AWS_ENDPOINT_NAME=${{ secrets.AWS_ENDPOINT_NAME }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env

      - name: Build Docker image
        run: |
          docker build -t fastapi-app .

      - name: Log in to AWS ECR (Elastic Container Registry)
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
          skip-logout: false
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names fastapi-app || aws ecr create-repository --repository-name fastapi-app
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Tag Docker image
        run: |
          docker tag fastapi-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fastapi-app:latest

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/fastapi-app:latest
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    needs: build-api
    runs-on: ubuntu-latest
    steps:
      # Setup SSH
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_CICD }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.EC2_PUBLIC_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH to EC2 public
        run: ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.EC2_PUBLIC_HOST }} "echo 'Connect SSH Success'"

      - name: Adding Known Hosts (Public)
        run: |
          # Remove existing public host
          ssh-keygen -R ${{ secrets.EC2_PUBLIC_HOST }} 2>/dev/null || true

          # Add new public host
          ssh-keyscan -t ed25519,rsa ${{ secrets.EC2_PUBLIC_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          chmod 600 ~/.ssh/known_hosts

      - name: Adding Known Hosts (Private)
        run: |
          # Remove existing private host
          ssh-keygen -R ${{ secrets.EC2_PRIVATE_HOST }} 2>/dev/null || true
          
          # Add new private host
          ssh ${{ secrets.AWS_EC2_USER }}@${{ secrets.EC2_PUBLIC_HOST }} 'ssh-keyscan -t ed25519,rsa ${{ secrets.EC2_PRIVATE_HOST }}' >> temp_known_hosts 2>/dev/null
          cat temp_known_hosts >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      # Deploy to EC2 private via EC2 public (jumphost)
      - name: Deploy to EC2 Private through Public jumphost
        run: |
          ssh -T \
            -o ServerAliveInterval=60 \
            -o ServerAliveCountMax=5 \
            -J ${{ secrets.AWS_EC2_USER }}@${{ secrets.EC2_PUBLIC_HOST }} ${{ secrets.AWS_EC2_USER }}@${{ secrets.EC2_PRIVATE_HOST }} << 'EOF'
            set -ex
            
            # Setup environment variables
            export AWS_REGION='${{ secrets.AWS_REGION }}'
            export AWS_ACCOUNT_ID='${{ secrets.AWS_ACCOUNT_ID }}'
            
            # Ensure docker is running
            sudo systemctl status docker || sudo systemctl start docker
            sudo systemctl enable docker
            
            # Login to ECR
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            
            # Pull latest container
            sudo docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/fastapi-app:latest
            
            # Stop and remove existing container if it exists
            sudo docker stop fastapi-container || true
            sudo docker rm fastapi-container || true
            
            # Run new container
            sudo docker run -d --name fastapi-container -p 80:8000 ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/fastapi-app:latest
          EOF